// The main function to convert infix expression
//to postfix expression
int prec(char c){
    if(c == '^')
        return 3;
    else if(c == '*' || c == '/')
        return 2;
    else if(c == '+' || c == '-')
        return 1;
    else
        return -1;
}
string infixToPostfix(string s){
    string postfix="";
    int n=s.length();
    stack<char> stk;
    stk.push('N');
    
    for(int i=0;i<n;i++){
        if((s[i]>='a' && s[i]<='z')||(s[i]>='A' && s[i]<='Z'))
            postfix.push_back(s[i]);
        else if(s[i]=='('){
            stk.push(s[i]);
        }else if(s[i]==')'){
            while(stk.top()!='N' && stk.top()!='('){ 
                char c=stk.top(); 
                stk.pop(); 
                postfix+=c; 
            } 
            if(stk.top() == '('){ 
                char c=stk.top(); 
                stk.pop(); 
            } 
        }else{
            while(stk.top()!='N' && prec(s[i])<=prec(stk.top())) { 
                char c=stk.top(); 
                stk.pop(); 
                postfix+=c; 
            } 
            stk.push(s[i]); 
        }
    }
    while(stk.top()!='N') { 
        char c=stk.top(); 
        stk.pop(); 
        postfix+=c; 
    } 
    return postfix;
}
