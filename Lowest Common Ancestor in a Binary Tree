
/* A binary tree node

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

/* If n1 and n2 are present, return pointer
   to LCA. If both are not present, return 
   NULL. Else if left subtree contains any 
   of them return pointer to left.*/
Node* lcaUtil(Node* root,int n1,int n2,bool &v1,bool &v2){
    if(root==NULL)
        return NULL;
    if(root->data==n1){
        v1=true;
        return root;
    } 
    if(root->data==n2){
        v2=true;
        return root;
    }
        
    Node *left_lca=lcaUtil(root->left,n1,n2,v1,v2);
    Node *right_lca=lcaUtil(root->right,n1,n2,v1,v2);
    
    if(left_lca && right_lca)
        return root;
    return left_lca!=NULL?left_lca:right_lca;
}
bool find(Node *root,int k){
    if(root==NULL) 
        return false; 
    if(root->data==k || find(root->left,k) ||  find(root->right,k)) 
        return true; 
  
    return false; 
}
Node* lca(Node* root ,int n1 ,int n2 )
{
    bool v1=false,v2=false;
    Node *findLca=lcaUtil(root,n1,n2,v1,v2);
    
    if(v1&&v2 || v1&&find(findLca,n2) || v2&&find(findLca,n1)) 
        return findLca; 
  
    return NULL; 
}
