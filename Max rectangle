/*You are required to complete this method*/
int maxHist(int R[],int n,int m){
    stack<int> result;
    int top_val,max_area=0,area=0;
    int i=0;
    while(i<m){
        if(result.empty() || R[result.top()]<=R[i])
            result.push(i++);
        else{
            top_val=R[result.top()]; 
            result.pop(); 
            area=top_val*i; 
  
            if(!result.empty()) 
                area=top_val*(i-result.top()-1); 
            max_area=max(area,max_area);
        }
    }
    while(!result.empty()) { 
        top_val = R[result.top()]; 
        result.pop(); 
        area=top_val*i; 
        if(!result.empty()) 
            area=top_val*(i-result.top()-1); 
  
        max_area=max(area,max_area); 
    } 
    return max_area;
}
int maxArea(int M[MAX][MAX], int n, int m) {
    int result=maxHist(M[0],n,m);
    for(int i=1;i<n;i++){
        for(int j=0;j<m;j++){
            if(M[i][j])
                M[i][j]+=M[i-1][j];
        }
        result=max(result,maxHist(M[i],n,m));
    }
    return result;
}
