/* A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */

// Should return  right view of tree
vector<int> rightView(Node *root)
{
    vector<int> ans;
    if (!root) 
        return ans; 
  
    queue<Node*> q; 
    q.push(root); 
  
    while (!q.empty()) {     
        // number of nodes at current level 
        int n = q.size(); 
          
        // Traverse all nodes of current level  
        for(int i = 1; i <= n; i++) { 
            Node* temp = q.front(); 
            q.pop(); 
                  
            // Print the right most element  
            // at the level 
            if (i == n) 
                ans.push_back(temp->data); 
              
            // Add left node to queue 
            if (temp->left != NULL) 
                q.push(temp->left); 
  
            // Add right node to queue 
            if (temp->right != NULL) 
                q.push(temp->right); 
        } 
    }
    return ans;
}
